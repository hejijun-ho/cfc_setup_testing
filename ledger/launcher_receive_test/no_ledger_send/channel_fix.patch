--- oak_restricted_kernel_sdk/src/channel.rs
+++ oak_restricted_kernel_sdk/src/channel.rs
@@ -91,25 +91,39 @@ pub fn start_blocking_server<T: micro_rpc::Transport<Error = !>>(
     let channel_handle = &mut oak_channel::server::ServerChannelHandle::new(channel);
     loop {
         log::debug!("waiting for a request message");
-        let (request_message, timer) =
-            channel_handle.read_request().context("couldn't receive message")?;
-        let request_message_invocation_id = request_message.invocation_id;
-        log::debug!(
-            "received request message with invocation id {} ({} bytes)",
-            request_message_invocation_id,
-            request_message.body.len()
-        );
-        let response = server.invoke(request_message.body.as_ref()).into_ok();
-        log::debug!(
-            "sending response message with invocation id {} ({} bytes)",
-            request_message_invocation_id,
-            response.len()
-        );
-        let response_message = oak_channel::message::ResponseMessage {
-            invocation_id: request_message_invocation_id,
-            body: response,
-        };
-        channel_handle.write_response(response_message)?;
-        stats.record(timer.elapsed());
+        log::debug!("waiting for a request message <GOOD PATCH>");
+
+        // let response_message_tmp = oak_channel::message::ResponseMessage {  ///////////// can not successfully arrive (get empty list and not blocked) in launcher.rs
+        //     invocation_id: 10,
+        //     body: b"qwertyuiop\n".to_vec(),
+        // };
+        // log::debug!("<testing result>: ");
+        // log::debug!("{:?}", response_message_tmp);  ///////////////
+        // channel_handle.write_response(response_message_tmp)?; /////////
+        log::debug!("~~~~~~~~<no testing send>~~~~~~");
+        loop{}
+
+        // let (request_message, timer) =
+        //     channel_handle.read_request().context("couldn't receive message here !!!")?;
+        // let request_message_invocation_id = request_message.invocation_id;
+        // log::debug!(
+        //     "received request message with invocation id {} ({} bytes)",
+        //     request_message_invocation_id,
+        //     request_message.body.len()
+        // );
+
+
+        // let response = server.invoke(request_message.body.as_ref()).into_ok();
+        // log::debug!(
+        //     "sending response message with invocation id {} ({} bytes)",
+        //     request_message_invocation_id,
+        //     response.len()
+        // );
+        // let response_message = oak_channel::message::ResponseMessage {
+        //     invocation_id: request_message_invocation_id,
+        //     body: response,
+        // };
+        // channel_handle.write_response(response_message)?;
+        // stats.record(timer.elapsed());
     }
 }
